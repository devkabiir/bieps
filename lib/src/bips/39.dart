library bieps.bips.bip39;

import 'dart:typed_data';

import 'package:pointycastle/digests/sha256.dart';
import 'package:pointycastle/digests/sha512.dart';
import 'package:pointycastle/key_derivators/api.dart';
import 'package:pointycastle/key_derivators/pbkdf2.dart';
import 'package:pointycastle/macs/hmac.dart';

import '../utils/utils.dart';
import 'en-mnemonic-word-list.dart';

/// Used for generating 12-24 words which can be then be converted to 512-bit seed
class BIP39 {
  static final int _seedIterations = 2048;
  static final int _seedKeySize = 64;
  static final List<String> _wordList = mnemonicWordList;

  /// Generates a mnemonic based in [initialEntropy]
  static List<String> generateMnemonics(Uint8List initialEntropy) {
    /// length of entropy in bits
    final int ent = initialEntropy.length * 8;

    /// 128 <= ENT <= 256 AND multiple of 32  (bits)
    if (!(128 <= ent && ent <= 256 && ent % 32 == 0)) {
      throw ArgumentError(
          'initial entropy must be between 128-256 bits and multiple of 32');
    }

    /// checksum is generated by taking the first ent/32 bits of its sha256 hash
    final int cs = (ent ~/ 32);

    final Uint8List hash = SHA256Digest().process(initialEntropy);
    final String checksumBits = bytesToBits(hash).substring(0, cs);

    /// This checksum is appended to the end of the initial entropy
    final String allBits = bytesToBits(initialEntropy) + checksumBits;

    return RegExp(r'(.{1,11})') // Capture groups of 11 bits
        .allMatches(allBits) // from [allBits]
        .map<String>(
            (Match m) => m.group(0)) // Convert the resulting list of bits
        .map<int>((String s) {
          if (s.length == 11) {
            return bitToByte(s);
          }
          print(s);
          return 9999;
        }) // to ints
        .where((int nullInt) => 9999 != nullInt) // discard invalid bits
        .map<String>((int index) => _wordList[
            index]) // Get words from wordlist using these ints as index
        .toList();
  }

  /// Generates a seed from given [mnemonic] sentence
  static Uint8List generateSeed(String mnemonic, [String passphrase]) {
    final String salt = 'mnemonic${passphrase ?? ''}';

    final Pbkdf2Parameters params = Pbkdf2Parameters(
        createUint8ListFromString(salt), _seedIterations, _seedKeySize);

    final HMac hmacSha512 = HMac(SHA512Digest(), 128)..reset();
    final PBKDF2KeyDerivator gen = PBKDF2KeyDerivator(hmacSha512)..init(params);
    return gen.process(createUint8ListFromString(mnemonic));
  }
}
